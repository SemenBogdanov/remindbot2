import platform
import requests
import telebot
from telebot.types import Message
import psycopg2
from datetime import datetime, timedelta
import time
import threading
import pandas as pd
import matplotlib.pyplot as plt
import io
import configparser
import logging
import os
import inspect

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_PATH = os.path.join(os.path.dirname(__file__), 'bot.log')
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler(LOG_PATH, encoding='utf-8'),
        logging.StreamHandler()
    ]
)

def log_info(msg):
    frame = inspect.currentframe().f_back
    logging.info(f"[{frame.f_code.co_name}:{frame.f_lineno}] {msg}")

# –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
if (platform.system()) == 'Windows':
    CONFIG_PATH = 'C:\\local_config\\my_global_config.cfg'
else:
    CONFIG_PATH = '/home/semen106/bot/my_global_config.cfg'

config = configparser.ConfigParser()
config.read(CONFIG_PATH)

db_creds = config['HOSTER_KC_DB'] if platform.system() == 'Windows' else config['HOSTER_KC_DB_LOCAL']

TELEGRAM_TOKEN = config['REMINDBOT2']['remindbot_token']
BIRTHDAY_CHAT_WITH_NIKA = 'birthday_chat_with_nika'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π chat_id

ADMIN_CHAT_ID = int(config['REMINDBOT2']['admin_chat_id'])  # id –∞–¥–º–∏–Ω–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
CHAT_ID = int(config['REMINDBOT2']['birthday_chat_with_nika'])  # id –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞

bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
try:
    bot.send_message(ADMIN_CHAT_ID, '–ë–æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
    logging.info('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')
except Exception as e:
    logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}')


def get_last_sync_date():
    try:
        conn = psycopg2.connect(**db_creds)
        cur = conn.cursor()
        cur.execute("""
            SELECT "current_timestamp" 
            FROM nsi_data.dict_portal_ac_employees_tb_form 
            ORDER BY "current_timestamp" DESC 
            LIMIT 1
        """)
        result = cur.fetchone()
        cur.close()
        conn.close()
        
        if result:
            return result[0].strftime('%d.%m.%Y %H:%M')
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}')
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def get_next_5_birthdays():
    try:
        logging.info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö 5 –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π...')
        conn = psycopg2.connect(**db_creds)
        cur = conn.cursor()
        cur.execute("""
            --–°–ª–µ–¥—É—é—â–∏–µ 5 –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            SELECT DISTINCT ON (fullname) fullname, birthday
            FROM nsi_data.dict_portal_ac_employees_tb_form
            where status is true and "current_timestamp" = (select "current_timestamp" cs from nsi_data.dict_portal_ac_employees_tb_form order by cs desc limit 1)
            and department ilike any(array['%–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è%','%—Ä–æ–µ–∫—Ç%','%–º—É–ª—å—Ç–∏–º–µ–¥%','%—Ä—É–∫–æ–≤–æ–¥%'])
            and birthday is not null
            ORDER BY fullname
        """)
        rows = cur.fetchall()
        cur.close()
        conn.close()

        if not rows:
            logging.info('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è.')
            return []

        today = datetime.now().date()
        birthday_data = []

        for fullname, birthday in rows:
            try:
                day, month = map(int, birthday.split('.'))
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É
                bday_this_year = datetime(today.year, month, day).date()
                # –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–µ–ª, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
                if bday_this_year < today:
                    bday_next_year = datetime(today.year + 1, month, day).date()
                    days_until = (bday_next_year - today).days
                else:
                    days_until = (bday_this_year - today).days

                birthday_data.append((fullname, birthday, days_until))
            except Exception as e:
                log_info(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è {fullname}: {birthday} ({e})")
                continue

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
        birthday_data.sort(key=lambda x: x[2])

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç
        result = []
        unique_days = set()

        for fullname, birthday, days_until in birthday_data:
            if len(unique_days) < 5 or days_until in unique_days:
                result.append((fullname, birthday, days_until))
                unique_days.add(days_until)
            elif len(unique_days) >= 5:
                break

        logging.info(f'–ü–æ–ª—É—á–µ–Ω–æ {len(result)} –∑–∞–ø–∏—Å–µ–π —Å–ª–µ–¥—É—é—â–∏—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π.')
        return result

    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π: {e}')
        return []

def send_next_5_birthdays(chat_id):
    try:
        birthdays = get_next_5_birthdays()
        if not birthdays:
            bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–ª–∏–∂–∞–π—à–∏—Ö –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è.")
            return

        message = "üéÇ –°–ª–µ–¥—É—é—â–∏–µ 5 –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π:\n\n"
        current_days = None

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        today_birthdays = []
        tomorrow_birthdays = []
        later_birthdays = []
        
        for fullname, birthday, days_until in birthdays:
            if days_until == 0:
                today_birthdays.append((fullname, birthday))
            elif days_until == 1:
                tomorrow_birthdays.append((fullname, birthday))
            else:
                later_birthdays.append((fullname, birthday, days_until))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –±–ª–æ–∫–∞–º
        if today_birthdays:

            message += "üéâ –°–µ–≥–æ–¥–Ω—è:\n"
            for fullname, birthday in today_birthdays:
                message += f" - {fullname} ({birthday})\n"
            message += "\n"
        
        if tomorrow_birthdays:
            message += "üéà –ó–∞–≤—Ç—Ä–∞:\n"
            for fullname, birthday in tomorrow_birthdays:
                message += f" - {fullname} ({birthday})\n"
            message += "\n"
        
        if later_birthdays:
            message += "üìÖ –£–∂–µ —Å–∫–æ—Ä–æ:\n"
            for fullname, birthday, days_until in later_birthdays:
                message += f" - {fullname} ({birthday}) - —á–µ—Ä–µ–∑ {days_until} –¥–Ω–µ–π\n"
            message += "\n"

        last_sync = get_last_sync_date()
        message += f"üìä –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞: {last_sync}"
        bot.send_message(chat_id, message)
        logging.info(f'–°–ø–∏—Å–æ–∫ —Å–ª–µ–¥—É—é—â–∏—Ö 5 –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}.')

    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π: {e}')
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è.")


def get_birthdays():
    try:
        logging.info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')
        conn = psycopg2.connect(
            **db_creds
            # host=DB_HOST,
            # port=DB_PORT,
            # dbname=DB_NAME,
            # user=DB_USER,
            # password=DB_PASSWORD,
            # connect_timeout=CONNECT_TIMEOUT
        )
        cur = conn.cursor()
        cur.execute("""
            --–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            SELECT DISTINCT ON (fullname) fullname, birthday
            FROM nsi_data.dict_portal_ac_employees_tb_form
            where status is true and "current_timestamp" = (select "current_timestamp" cs from nsi_data.dict_portal_ac_employees_tb_form order by cs desc limit 1)
            and department ilike any(array['%–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è%','%—Ä–æ–µ–∫—Ç%','%–º—É–ª—å—Ç–∏–º–µ–¥%','%—Ä—É–∫–æ–≤–æ–¥%'])
            ORDER BY fullname
        """)
        rows = cur.fetchall()
        cur.close()
        conn.close()
        logging.info(f'–ü–æ–ª—É—á–µ–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã.')
        return rows
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}')
        return []

def wrap_text(text, width=20):
    # –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∫–∞–∂–¥—ã–µ width —Å–∏–º–≤–æ–ª–æ–≤
    return '\n'.join([text[i:i+width] for i in range(0, len(text), width)])

def format_birthday_dataframe():
    today = datetime.now().date()
    tomorrow = today + timedelta(days=1)
    # –ì—Ä–∞–Ω–∏—Ü—ã —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
    # –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫:
    # today = datetime(2024, 6, 7).date()  # –¥–æ–ø—É—Å—Ç–∏–º, —Å–µ–≥–æ–¥–Ω—è –ø—è—Ç–Ω–∏—Ü–∞ (weekday() == 4)
    # days_until_next_monday = (7 - today.weekday()) % 7 or 7
    # days_until_next_monday = (7 - 4) % 7 or 7 = 3
    # next_monday = today + timedelta(days=3)  # –±—É–¥–µ—Ç –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 10 –∏—é–Ω—è 2024
    # next_sunday = next_monday + timedelta(days=6)  # –±—É–¥–µ—Ç –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 16 –∏—é–Ω—è 2024

    days_until_next_monday = (7 - today.weekday()) % 7 or 7
    next_monday = today + timedelta(days=days_until_next_monday)
    next_sunday = next_monday + timedelta(days=6)
    next_month = (today.replace(day=1) + timedelta(days=32)).replace(day=1)

    birthdays = get_birthdays()
    data = []


    # logging.info(f"–°–µ–≥–æ–¥–Ω—è: {today}")
    # logging.info(f"–ó–∞–≤—Ç—Ä–∞: {tomorrow}")
    # logging.info(f"–°–ª–µ–¥. –Ω–µ–¥–µ–ª—è: {next_sunday}")
    # logging.info(f"–°–ª–µ–¥. –º–µ—Å—è—Ü: {next_month}")

    for fullname, birthday in birthdays:
        # logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {fullname} {birthday}")
        if not birthday:
            continue
        # birthday: —Å—Ç—Ä–æ–∫–∞ 'DD.MM'
        try:
            day, month = map(int, birthday.split('.'))
            bday = datetime(today.year, month, day).date()
        except Exception as e:
            log_info(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è {fullname}: {birthday} ({e})")
            continue

        # logging.info(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {bday}")   
        wrapped_fullname = wrap_text(fullname, width=50)
        if bday == today:
            # logging.info(f"–°–µ–≥–æ–¥–Ω—è: {fullname} {birthday}")
            data.append([0, "–°–µ–≥–æ–¥–Ω—è", wrapped_fullname, f"{birthday}"])
        elif bday == tomorrow:
            # logging.info(f"–ó–∞–≤—Ç—Ä–∞: {fullname} {birthday}")
            data.append([1, "–ó–∞–≤—Ç—Ä–∞", wrapped_fullname, f"{birthday}"])
        elif next_monday <= bday <= next_sunday:
            data.append([2, "–ù–∞ —Å–ª–µ–¥. –Ω–µ–¥–µ–ª–µ", wrapped_fullname, f"{birthday}"])
        elif bday.month == next_month.month:
            # logging.info(f"–í —Å–ª–µ–¥. –º–µ—Å—è—Ü–µ: {fullname} {birthday}")
            data.append([3, "–í —Å–ª–µ–¥. –º–µ—Å—è—Ü–µ", wrapped_fullname, f"{birthday}"])

    if not data:
        data.append([4, "-", "–ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π", "-"])

    df = pd.DataFrame(data, columns=["sort", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–§–ò–û", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"])
    df = df.sort_values(by="sort").drop(columns=["sort"])
    logging.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {df}")
    return df

def send_birthday_reminder(chat_id=CHAT_ID):
    try:
        df = format_birthday_dataframe()
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Ñ–∏–≥—É—Ä—ã, —á—Ç–æ–±—ã –§–ò–û –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏–ª–æ—Å—å –∏ –Ω–µ –≤—ã–ª–µ—Ç–∞–ª–æ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —è—á–µ–π–∫–∏
        fig_width = 14  # —É–≤–µ–ª–∏—á–µ–Ω–æ —Å 10 –¥–æ 14
        fig_height = 0.5 + 0.7 * len(df)
        fig, ax = plt.subplots(figsize=(fig_width, fig_height))
        ax.axis('off')
        tbl = ax.table(cellText=df.values, colLabels=df.columns, loc='center', cellLoc='center')
        tbl.auto_set_font_size(False)
        tbl.set_fontsize(16)
        tbl.scale(2.5, 2)  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —è—á–µ–µ–∫
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–∞ "–§–ò–û"
        for (row, col), cell in tbl.get_celld().items():
            if col == 1:  # "–§–ò–û" –æ–±—ã—á–Ω–æ –≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü (0 - –ö–∞—Ç–µ–≥–æ—Ä–∏—è, 1 - –§–ò–û, 2 - –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è)
                cell.set_width(0.45)
            else:
                cell.set_width(0.25)
            cell.set_height(0.15)
            cell.set_fontsize(16)
        buf = io.BytesIO()
        plt.savefig(buf, format='png', bbox_inches='tight', dpi=300)
        buf.seek(0)
        plt.close(fig)
        bot.send_photo(chat_id, buf)
        logging.info(f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}.')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /birthdays –∏ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /birthdays –∏ /next5
@bot.message_handler(commands=['birthdays'])
def handle_birthdays_command(message):
    send_birthday_reminder(chat_id=message.chat.id) 

@bot.message_handler(commands=['next5'])
def handle_next5_command(message: Message):
    if message.from_user.id == ADMIN_CHAT_ID:
        send_next_5_birthdays(chat_id=message.chat.id)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(func=lambda message: True)
def handle_any_message(message):
    if message.chat.id == ADMIN_CHAT_ID:
        send_birthday_reminder(chat_id=message.chat.id)

def scheduler():
    times = ["03:30"]
    while True:
        logging.info('–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...')
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–π target
        now = datetime.now()
        logging.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now}")
        # –°–ø–∏—Å–æ–∫ –±—É–¥—É—â–∏—Ö target –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        future_targets = [
            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ target –≤—Ä–µ–º–µ–Ω–∏
            # –Ω–∞–ø–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–µ–π—á–∞—Å 14:00, —Ç–æ target –±—É–¥–µ—Ç 15:30
            now.replace(hour=int(t[:2]), minute=int(t[3:]), second=0, microsecond=0)
            for t in times
            if now.replace(hour=int(t[:2]), minute=int(t[3:]), second=0, microsecond=0) > now
        ]
        if future_targets:
            target = min(future_targets)
        else:
            # –í—Å–µ target –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—à–ª–∏, –±–µ—Ä–µ–º —Å–∞–º–æ–µ —Ä–∞–Ω–Ω–µ–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            t_earliest = times[0]
            target = (now + timedelta(days=1)).replace(hour=int(t_earliest[:2]), minute=int(t_earliest[3:]), second=0, microsecond=0)
        wait_seconds = (target - now).total_seconds()
        logging.info(f'–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {wait_seconds/60:.1f} –º–∏–Ω—É—Ç.')
        time.sleep(wait_seconds)
        send_birthday_reminder()
        send_next_5_birthdays(CHAT_ID)


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def run_bot():
    # –ó–∞–ø—É—Å–∫–∞–µ–º scheduler —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    thread = threading.Thread(target=scheduler, daemon=True)
    thread.start()
    while True:
        try:
            logging.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.')
            bot.polling(none_stop=True, interval=0)
        except requests.exceptions.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥.")
            print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥.")
            time.sleep(15)
        except Exception as e:
            logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.")
            time.sleep(30)


if __name__ == '__main__':
    run_bot()